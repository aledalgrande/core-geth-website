{"componentChunkName":"component---node-modules-etclabscore-gatsby-theme-pristine-src-templates-default-tsx","path":"/setup-on-digital-ocean","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to setup an Ethereum node on Digital Ocean\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How to setup an Ethereum node on Digital Ocean\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Digital Ocean (DO) is a cloud computing service and an alternative to AWS, GCP, or Azure. Cloud computing uses remote resources, saving organizations the cost of servers and other equipment. Where applicable, additional documentation will be referenced throughout this tutorial. If you have trouble on a step, then feel free to review the provided \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"##resources\"\n  }), \"resources\"), \".\"), mdx(\"h2\", null, \"What you'll learn\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup and interact with an Ubuntu-LTS instance on DO.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup Core-geth node software on the Ubuntu-LTS instance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run Core-geth to provide the ETC, ETH, or related test networks.\")), mdx(\"h2\", null, \"Step 01 - Create a DO account\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://m.do.co/c/0ed3a5faf2f6\"\n  }), \"here\"), \" to create a DO account.\")), mdx(\"h2\", null, \"Setp 02 - Create a new project\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the control panel's main menu, under the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Projects\"), \" section, click \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"+ New Project\"), \" to open the project creation page or use this quick link: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://cloud.digitalocean.com/projects/new?\"\n  }), \"https://cloud.digitalocean.com/projects/new?\"), \" \", \"[1]\", \". Eg: \\\"ethereum\\\".\")), mdx(\"h2\", null, \"Step 03 - Create a new Droplet\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"From the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Create\"), \" menu in the top right of the control panel click \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Droplets\"), \" or use this quick link: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://cloud.digitalocean.com/droplets/new?\"\n  }), \"https://cloud.digitalocean.com/droplets/new?\"), \" \", \"[2]\", \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Choose an Ubuntu-LTS image and a plan with at least 4 GB RAM.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add storage volume if running \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"EthClassic\"), \" or \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ethereum\"), \" mainnets.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Choose SSH-key authentication.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Choose a hostname. eg: \\\"mordor-testnet\\\", \\\"kotti-testnet\\\", \\\"etc-mainnet\\\", \\\"eth-mainnet\\\", or simply something descriptive to the purpose.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Choose desired region.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the droplet to a project. eg: \\\"ethereum\\\".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Create\"), \".\")), mdx(\"h2\", null, \"Step 04 - Initial server setup\"), mdx(\"p\", null, \"At this point a fresh Ubuntu-LTS server is created. Before installing Core-geth, some optimizations to connect to the server should be done as well as creating a user.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Complete \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\"\n  }), \"this\"), \" initial Ubuntu server setup guide \", \"[3]\", \". When proper connectivity and user is setup then proceed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update packages and dependecies\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"sudo apt-get update && sudo apt-get upgrade\\n\")), mdx(\"h2\", null, \"Step 05 - Install Core-geth\"), mdx(\"p\", null, \"There are multiple options to install and run Core-geth from binary, docker, or building from source \", \"[4]\", \". This step will cover installation via release binary.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"latest\"), \" release for linux\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"wget https://github.com/etclabscore/core-geth/releases/download/v1.11.4/core-geth-linux-v1.11.4.zip\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Unzip the arhive content to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/bin/\"), \" directory. This will put the executable \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"geth\"), \" binary into the /bin/ directory.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo unzip core-geth-linux-v1.11.4.zip -d /bin/\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Check installation\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"geth version\\n\")), mdx(\"h2\", null, \"Setup 06 - Run a network\"), mdx(\"p\", null, \"Core-geth is a distribution of the Ethereum Foundation's official Go-Ethereum (Geth) client with more features, such as, running both \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"EthClassic\"), \" & \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ethereum\"), \" related networks. To view all available usage and commands run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geth --help\"), \".\"), mdx(\"p\", null, \"Available networks flags:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"  --classic                           Ethereum Classic network: pre-configured Ethereum Classic mainnet\\n  --mordor                            Mordor network: Ethereum Classic cross-client proof-of-work test network\\n  --social                            Ethereum Social network: pre-configured Ethereum Social mainnet\\n  --mix                               MIX network: pre-configured MIX mainnet\\n  --ethersocial                       Ethersocial network: pre-configured Ethersocial mainnet\\n  --rinkeby                           Rinkeby network: pre-configured proof-of-authority test network\\n  --kotti                             Kotti network: cross-client proof-of-authority test network\\n  --goerli                            G\\xF6rli network: pre-configured proof-of-authority test network\\n  --rinkeby                           Rinkeby network: pre-configured proof-of-authority test network\\n  --ropsten                           Ropsten network: pre-configured proof-of-work test network\\n\")), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geth --classic\"), \" for EthClassic mainnet or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--mordor\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--kotti\"), \" for related testnet. Running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geth <commands>\"), \" will begin to sync the blockchain in the current terminal session. To run the process in the background than the foreground simply run geth with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nohup\"), \".  eg: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nohup geth <commands> &\")), mdx(\"h2\", null, \"Dive deep\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DO Load Balanders: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.digitalocean.com/products/load-balancer/\"\n  }), \"https://www.digitalocean.com/products/load-balancer/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do Monitoring: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.digitalocean.com/docs/monitoring/\"\n  }), \"https://www.digitalocean.com/docs/monitoring/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go-Ethereum docs: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://geth.ethereum.org/\"\n  }), \"http://geth.ethereum.org/\"))), mdx(\"h2\", null, \"Sources\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.digitalocean.com/docs/projects/how-to/create/\"\n  }), \"https://www.digitalocean.com/docs/projects/how-to/create/\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://cloud.digitalocean.com/droplets/new?\"\n  }), \"https://cloud.digitalocean.com/droplets/new?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\"\n  }), \"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\"), \" \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://core-geth.org/install\"\n  }), \"https://core-geth.org/install\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"How to setup an Ethereum node on Digital Ocean Introduction Digital Ocean (DO) is a cloud computing service and an alternative to AWS, GCP…","fields":{"slug":"/setup-on-digital-ocean"},"frontmatter":{"title":"How to setup an Ethereum node on Digital Ocean"}}},"pageContext":{"slug":"/setup-on-digital-ocean"}}}